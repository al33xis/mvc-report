{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block content %}
<h1>Report</h1>
<h2>Kmom01</h2>
<p>
    Då jag är helt ny inom programmeringsvärlden så är kursen OOPython det första jag kom i kontakt med gällande
    objekt-relataterad programmering. Så jag har inga fler förkunskaper än det jag har lärt mig här på programmet.
</p>
<p>
    Det krävs inte mycket för att skapa sina första klasser och objekt i PHP då mycket påminner om hur det fungerar i Python.
    Största skillnaden som jag tror att jag kommer ha lite svårt med i början är att komma ihåg att skriva "new" vid skapandet
    av varje nytt objekt, att man använder "->" i stället för en punkt som i Python och att man använder "this" och inte "self".
    Sedan måste jag också komma ihåg att börja specificera vilka typer som t.ex. används som parametrar (t.ex. int, str) och det
    ska bli väldigt intressant att börja testa runt med autoloader-funktionen som finns i PHP.
</p>
<p>
    Exempel på en klass: <br>
    <code>
        class Test1 <br>
        { <br>
            private $name;<br>
            private $city;<br>
            <br>
            public function __construct(string $name, string $city)<br>
            {<br>
                $this->name = $name;<br>
                $this->city = $city;<br>
            }<br>
            <br>
            public function about() <br>
            {<br>
                return "My name is {$this->name} and I live in {$this->city}."<br>
            }<br>
        }<br>
        <br>
        $alexis = new Test1("Alexis", "Helsingborg");<br>
    </code>
</p>
<p>
    Nu när vi snart har gått ett helt läsår så börjar den mesta syntaxen se "likadan" ut, det blir lättare att sätta sig
    in i nya ramverk och det går lite snabbare att förstå koncepten. Det mesta börjar kännas logiskt och vikten av att
    var sak har sin plats börjar jag nu inse. Så jag känner att strukturen är mer än överkomlig och det ska
    bli roligt att se var den här kursen tar vägen!
</p>
<p>
    Gällande "PHP The Right Way" så känns den just nu väldigt maffig men fylld med riktigt bra information. Jag tycker
    att kapitlen gällande "Security" och "Databases" känns mest intressanta efter att ha skummat igenom några av dem. 
    De som dock kan vara av extra stor vikt för en nybörjare tror jag är "Code Style Guide", "Language Highlights" och "Coding 
    Practices". Personligen är jag mer intresserad av vad som händer bakom än det som visas på själva skärmen och därav blev jag
    extra intresserad av de två kapitlen jag skrev ovan. 
</p>
<p>
    Min TIL för detta kursmomentet är en så liten sak som att kunna starta en PHP-server via terminalen. Tidigare har jag gått 
    via XAMPP men känns som att det nu är överflödigt? Eller behöver jag kanske ha XAMPP i bakgrunden för att kunna starta en 
    PHP-server via terminalen? Har för mig att jag läste någonstans att PHP har en inbyggd webserver sedan några versioner 
    tillbaka... Det här får jag kolla upp!
</p>
<h2>Kmom02</h2>

<p>
    För min del är det fortfarande lite "rörigt" om vad som är vad när det kommer till arv och komposition, det blir bättre men kommer nog ta lite tid.
    Kortfattat så kan man förklara att arv är en relation som kan förklaras med är-en (is-a), alltså att en klass ärver från en annan (extends). Den nya klassen
    får då tillgång till allt som finns i den ärvda klassen med hjälp av t.ex. "parent::" ("self::" används för att peka på den nya klassens variabler). 
</p>
<p>
    Om vi sedan hoppar över till komposition som kan förklaras genom en relation som heter har-en (has-a) så handlar det om att en klass kan bestå av en 
    annan klass. Det innebär att i konstruktorn så används den andra klassen i skapandet av det nya objektet. Vidare innebär det att objektet inte kan existera 
    som ett fristående objekt, förstörs "basklassen" så förstörs även vårt objekt. Ett exempel är hur jag arbetar med Card-klassen i CardDeck, Card-klassen 
    måste existera för att jag ska kunna skapa en kortlek.
</p>
<p>
    Trait är något som kan användas för att utöka en klass med ytterligare metoder och variabler då PHP inte stödjer multipelt arv. Det fungerar nästan på 
    samma sätt som arv men används inte riktigt på samma sätt "kodmässigt". En fördel att använda trait är när man har flera klasser som behöver använda samma metod,
    i stället för att skriva/kopiera in koden i alla klasser så gör man ett Trait. Så vid eventuella ändringar så räcker det att uppdatera Traitet.
</p>
<p>
    Kortfattat så är Interface ett "kontrakt" som innebär att allt som står i interfacet måste implementeras av klasserna som använder det. Man skriver ingen kod 
    i "interface-klassen" och det finns heller inga variabler utan man skriver endast namnen på metoderna som måste finnas med.
</p>
<p>
    Överlag så är jag nöjd med kmom02 och min prestation hittills, jag har redan hittat saker jag kan förbättra (skriva ut "riktiga" kort, återanvända kod, försöka en annan lösning
    på hur jag ska skriva funktionen som löser player-delen m.fl.). Däremot så tycker jag att mina klasser än så länge är bra uppbyggda och lagom åtskilda och jag 
    tycker nästan det är skönare med fler filer än mer kod i respektive fil. Med det sagt skulle jag även kunna dela upp koden som finns i CardDeckController i två filer. 
    Tyvärr har jag hamnat lite efter men jobbar sakta och säkert igenom kursmomenten och uppgifterna.
</p>
<p>
    Modelleringen och problemlösningen gör jag i nästa kmom. 
</p>
<p>
    Min TIL för det här kursmomentet är hur "simpelt" det är att skicka JSON, trodde det var mer avancerat än så men tydligen inte... Nu är det endast enkla arrayer vi 
    arbetar med, men känns ändå som att det är samma grund oavsett hur "avancerad" JSON-data man ska arbeta med.
</p>
<h2>Kmom03</h2>
<p>

</p>
<h2>Kmom04</h2>
<p>

</p>
<h2>Kmom05</h2>
<p>

</p>
<h2>Kmom06</h2>
<p>

</p>
<h2>Kmom07/10</h2>
<p>

</p>
{% endblock %}